loki-stack:
  fluent-bit:
    enabled: false

  promtail:
    enabled: true

  grafana:
    enabled: true
    adminUser: admin
    adminPassword: admin
    service:
      type: NodePort
    persistence:
      inMemory:
        enabled: true

  prometheus:
    enabled: true
    alertmanager:
      persistentVolume:
        size: 0.2Gi
    server:
      service:
        type: NodePort
      persistentVolume:
        size: 1Gi

#kube-prometheus-stack:
#  grafana:
#    enabled: false
#  prometheus:
#    service:
#      type: NodePort
#      labels:
#        grafana_datasource: "1"
#    prometheusSpec:
#      serviceMonitorSelectorNilUsesHelmValues: false
#      serviceMonitorSelector: { }
#      podMetadata:
#        labels:
#          app: prometheus
#          app.kubernetes.io/instance: prometheus
#          app.kubernetes.io/name: prometheus
#
#      additionalScrapeConfigs:
#        # Scrape config for service endpoints.
#        #
#        # The relabeling allows the actual service scrape endpoint to be configured
#        # via the following annotations:
#        #
#        # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
#        # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
#        # to set this to `https` & most likely set the `tls_config` of the scrape config.
#        # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
#        # * `prometheus.io/port`: If the metrics are exposed on a different port to the
#        # service then set this appropriately.
#        - job_name: 'kubernetes-service-endpoints'
#
#          kubernetes_sd_configs:
#            - role: endpoints
#
#          relabel_configs:
#            - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
#              action: keep
#              regex: true
#            - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scheme ]
#              action: replace
#              target_label: __scheme__
#              regex: (https?)
#            - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_path ]
#              action: replace
#              target_label: __metrics_path__
#              regex: (.+)
#            - source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
#              action: replace
#              target_label: __address__
#              regex: ([^:]+)(?::\d+)?;(\d+)
#              replacement: $1:$2
#            - action: labelmap
#              regex: __meta_kubernetes_service_label_(.+)
#            - source_labels: [ __meta_kubernetes_namespace ]
#              action: replace
#              target_label: kubernetes_namespace
#            - source_labels: [ __meta_kubernetes_service_name ]
#              action: replace
#              target_label: kubernetes_name
#            - source_labels: [ __meta_kubernetes_service_name ]
#              action: drop
#              regex: 'node-exporter'
#
#        # Example scrape config for pods
#        #
#        # The relabeling allows the actual pod scrape endpoint to be configured via the
#        # following annotations:
#        #
#        # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
#        # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
#        # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
#        - job_name: 'kubernetes-pods'
#
#          kubernetes_sd_configs:
#            - role: pod
#
#          relabel_configs:
#            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
#              action: keep
#              regex: true
#            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
#              action: replace
#              target_label: __metrics_path__
#              regex: (.+)
#            - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
#              action: replace
#              regex: ([^:]+)(?::\d+)?;(\d+)
#              replacement: $1:$2
#              target_label: __address__
#            - action: labelmap
#              regex: __meta_kubernetes_pod_label_(.+)
#            - source_labels: [ __meta_kubernetes_namespace ]
#              action: replace
#              target_label: kubernetes_namespace
#            - source_labels: [ __meta_kubernetes_pod_name ]
#              action: replace
#              target_label: kubernetes_pod_name
